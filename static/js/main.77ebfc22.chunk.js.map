{"version":3,"sources":["Card.tsx","id.ts","ResetCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","_ref","children","onClick","zIndex","props","Object","objectWithoutProperties","react","react_transition_group","assign","timeout","status","className","concat","style","objectSpread","idGenerator","id","regenerator_default","a","wrap","_context","prev","next","stop","_marked","generator","ResetCard","onReset","Card_Card","INITIAL_CARDS","Array","from","map","value","content","react_default","createElement","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","cards","setCards","component","slice","index","key","length","ResetCard_ResetCard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAIaA,EAAO,SAAAC,GAAkD,IAA/CC,EAA+CD,EAA/CC,SAAUC,EAAqCF,EAArCE,QAASC,EAA4BH,EAA5BG,OAAWC,EAAiBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,iCAClE,OACIO,EAAA,cAACC,EAAA,cAADH,OAAAI,OAAA,CAAeC,QAAS,KAASN,GAC5B,SAACO,GAAD,OACGJ,EAAA,oBAAAF,OAAAI,OAAA,CACIG,UAAS,OAAAC,OAASX,EAAU,aAAe,IAC3CY,MAAO,CAAEX,OAAQA,GAAqB,YAAXQ,EAAuB,EAAI,KAF1DN,OAAAU,EAAA,EAAAV,CAAA,CAGUH,WAAYE,IAEjBH,iCCbXe,GAAV,SAAUA,IAAV,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACQN,EAAK,EADb,YAEWA,EAAKA,EAAK,GAFrB,CAAAI,EAAAE,KAAA,QAGQ,OAHRF,EAAAE,KAAA,EAGcN,IAHd,OAAAI,EAAAE,KAAA,gCAAAF,EAAAG,SAAAC,GAOA,IAAMC,EAAYV,cCHLW,EAAY,SAAA3B,GAAA,IAAG4B,EAAH5B,EAAG4B,QAAH,OACrBrB,EAAA,cAACsB,EAAD,CAAM1B,OAAQ,GACVI,EAAA,qBAAKK,UAAU,aACXL,EAAA,qBAAKK,UAAU,WAEnBL,EAAA,wBAAQL,QAAS0B,GAAjB,aCDFE,EAAgBC,MAAMC,KAAKD,MAAM,IAAIE,IAAI,WAC3C,IAAMhB,EFCCS,EAAUH,OAAOW,MEAxB,MAAO,CACHjB,KACAkB,QAASC,EAAAjB,EAAAkB,cAAA,MAAIvB,MAAO,CAAEwB,UAAW,WAAxB,QAA0CrB,MCAvCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOT,EAAAjB,EAAAkB,cFuBG,WAAM,IAAAS,EACKC,mBAASjB,GADdkB,EAAA3C,OAAA4C,EAAA,EAAA5C,CAAAyC,EAAA,GACdI,EADcF,EAAA,GACPG,EADOH,EAAA,GAGrB,OACIZ,EAAAjB,EAAAkB,cAAA,OAAKzB,UAAU,OACXwB,EAAAjB,EAAAkB,cAAC7B,EAAA,gBAAD,CAAiB4C,UAAW,MACvBF,EACIG,MAAM,EA7BF,GA8BJpB,IAAI,SAAAjC,EAAkBsD,GAAlB,IAAGnB,EAAHnC,EAAGmC,QAASlB,EAAZjB,EAAYiB,GAAZ,OACDmB,EAAAjB,EAAAkB,cAACR,EAAD,CACI3B,QAAS,kBAAMiD,EAASD,EAAMG,MAAM,KACpCE,IAAKtC,EACLd,OAlCH,EAkC8BmD,GAE1BnB,KAGZe,EAAMM,OAvCE,GAwCLpB,EAAAjB,EAAAkB,cAACoB,EAAD,CAAW7B,QAAS,kBAAMuB,EAASrB,SEzCvC,MAAS4B,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77ebfc22.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './Card.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nexport const Card = ({ children, onClick, zIndex, ...props }: any) => {\r\n    return (\r\n        <CSSTransition timeout={200} {...props}>\r\n            {(status) => (\r\n                <div\r\n                    className={`Card${onClick ? ' clickable' : ''}`}\r\n                    style={{ zIndex: zIndex + (status === 'exiting' ? 1 : 0) }}\r\n                    {...{ onClick, ...props }}\r\n                >\r\n                    {children}\r\n                </div>\r\n            )}\r\n        </CSSTransition>\r\n    );\r\n};\r\n","function* idGenerator() {\n    let id = 0;\n    while (id < id + 1) {\n        yield id++;\n    }\n}\n\nconst generator = idGenerator();\n\nexport function ID(): number {\n    return generator.next().value;\n}\n","import * as React from 'react';\r\nimport { Card } from './Card';\r\nimport './ResetCard.css';\r\n\r\nexport const ResetCard = ({ onReset }: any) => (\r\n    <Card zIndex={0}>\r\n        <div className=\"ResetCard\">\r\n            <div className=\"check\" />\r\n        </div>\r\n        <button onClick={onReset}>Restart</button>\r\n    </Card>\r\n);\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Card } from './Card';\nimport { TransitionGroup } from 'react-transition-group';\nimport { ID } from './id';\nimport { ResetCard } from './ResetCard';\n\nconst CARDS_TO_DISPLAY = 3;\nconst INITIAL_CARDS = Array.from(Array(4)).map(() => {\n    const id = ID();\n    return {\n        id,\n        content: <h2 style={{ textAlign: 'center' }}>Card {id}</h2>,\n    };\n});\n\n// interface IQuestion {\n//     id: number;\n//     answer: null | boolean;\n//     // skippable: boolean;\n// }\n\n// const INITIAL_QUESTIONS = Array.from(Array(4)).map(\n//     (): IQuestion => ({\n//         id: ID(),\n//         answer: null,\n//     }),\n// );\n\nexport const App = () => {\n    const [cards, setCards] = useState(INITIAL_CARDS);\n    // const [questions, setQuestions] = useState(INITIAL_QUESTIONS);\n    return (\n        <div className=\"App\">\n            <TransitionGroup component={null}>\n                {cards\n                    .slice(0, CARDS_TO_DISPLAY)\n                    .map(({ content, id }, index) => (\n                        <Card\n                            onClick={() => setCards(cards.slice(1))}\n                            key={id}\n                            zIndex={CARDS_TO_DISPLAY - index}\n                        >\n                            {content}\n                        </Card>\n                    ))}\n                {cards.length < CARDS_TO_DISPLAY && (\n                    <ResetCard onReset={() => setCards(INITIAL_CARDS)} />\n                )}\n            </TransitionGroup>\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}